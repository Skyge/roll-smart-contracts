// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// TokenFactoryABI is the input ABI used to generate the binding from.
const TokenFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"PLATFORM_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenVestingInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenVesting\",\"type\":\"address\"}],\"name\":\"setTokenVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenFactory\",\"type\":\"address\"}],\"name\":\"migrateTokenFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_initialPercentage\",\"type\":\"uint8\"},{\"name\":\"_vestingPeriodInWeeks\",\"type\":\"uint256\"},{\"name\":\"_vestingBeneficiary\",\"type\":\"address\"}],\"name\":\"createToken\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPlatformWallet\",\"type\":\"address\"}],\"name\":\"setPlatformWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPercentage\",\"type\":\"uint8\"}],\"name\":\"setPlatformPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"parseAddr\",\"outputs\":[{\"name\":\"parsed\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLATFORM_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenVesting\",\"type\":\"address\"},{\"name\":\"_turingWallet\",\"type\":\"address\"},{\"name\":\"_platformPercentage\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vestingBeneficiary\",\"type\":\"address\"}],\"name\":\"LogTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldP\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"newP\",\"type\":\"uint8\"}],\"name\":\"LogPlatformPercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPW\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPW\",\"type\":\"address\"}],\"name\":\"LogPlatformWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldTV\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newTV\",\"type\":\"address\"}],\"name\":\"LogTokenVestingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTokenFactory\",\"type\":\"address\"}],\"name\":\"LogTokenFactoryMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// TokenFactoryBin is the compiled bytecode used for deploying new contracts.
const TokenFactoryBin = `60806040523480156200001157600080fd5b5060405160608062004bb9833981018060405260608110156200003357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060008160ff16118015620000b0575060648160ff16105b1515620000bc57600080fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620000fa57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515620001c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f547572696e672057616c6c65742061646472657373206d757374206265206e6f81526020017f6e207a65726f000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600060146101000a81548160ff021916908360ff160217905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415620002c6576200026262000313565b604051809103906000f0801580156200027f573d6000803e3d6000fd5b50600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000308565b84600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050505062000324565b60405161120b80620039ae83390190565b61367a80620003346000396000f3fe608060405260043610620000d3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806309886c9c14620000d8578063151ad610146200010c57806343e3469614620001665780635779679714620001bb578063721723641462000210578063747ef425146200026a5780638831e9cf1462000461578063893d20e814620004b65780638da5cb5b1462000510578063961f3c01146200056a578063b718f83a14620005ac578063eb8b12d414620006bb578063f2fde38b1462000715575b600080fd5b348015620000e557600080fd5b50620000f06200076a565b604051808260ff1660ff16815260200191505060405180910390f35b3480156200011957600080fd5b50620001246200077d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200017357600080fd5b50620001b9600480360360208110156200018c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620007a3565b005b348015620001c857600080fd5b506200020e60048036036020811015620001e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620009d0565b005b3480156200021d57600080fd5b506200022862000b69565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200027757600080fd5b506200041f600480360360e08110156200029057600080fd5b8101908080359060200190640100000000811115620002ae57600080fd5b820183602082011115620002c157600080fd5b80359060200191846001830284011164010000000083111715620002e457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156200034857600080fd5b8201836020820111156200035b57600080fd5b803590602001918460018302840111640100000000831117156200037e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff16906020019092919080359060200190929190803560ff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000b93565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200046e57600080fd5b50620004b4600480360360208110156200048757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620011b7565b005b348015620004c357600080fd5b50620004ce6200134f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200051d57600080fd5b506200052862001378565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200057757600080fd5b50620005aa600480360360208110156200059057600080fd5b81019080803560ff1690602001909291905050506200139d565b005b348015620005b957600080fd5b506200067960048036036020811015620005d257600080fd5b8101908080359060200190640100000000811115620005f057600080fd5b8201836020820111156200060357600080fd5b803590602001918460018302840111640100000000831117156200062657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505062001496565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620006c857600080fd5b50620006d3620014a4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200072257600080fd5b5062000768600480360360208110156200073b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620014ca565b005b600060149054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620007ff57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16620008218262001621565b73ffffffffffffffffffffffffffffffffffffffff16141515620008d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f6e657720546f6b656e56657374696e67206e6f74206f776e656420627920546f81526020017f6b656e466163746f72790000000000000000000000000000000000000000000081525060400191505060405180910390fd5b7f35b0178b0584d12972881578e88c921bc0e92c26c168d8637f9c5f48fb99fd64600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a180600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000a2c57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801562000aea57600080fd5b505af115801562000aff573d6000803e3d6000fd5b505050507f43f3ecc0ae19ce2fa7256a950513c1bee76722d5f51f34db0c862105411c6ba681604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000bf157600080fd5b62000bfb620019e4565b62000c0786866200181a565b90508562000c6f82600260038110151562000c1e57fe5b602002015162000c6084600160038110151562000c3757fe5b602002015185600060038110151562000c4c57fe5b60200201516200195590919063ffffffff16565b6200195590919063ffffffff16565b14151562000d0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001807f54686520737570706c79206d7573742062652073616d6520617320746865207081526020017f726f706f7274696f6e2c2073616e69747920636865636b2e000000000000000081525060400191505060405180910390fd5b60008989898487600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000d6262001a07565b8080602001806020018860ff1660ff16815260200187600360200280838360005b8381101562000da057808201518184015260208101905062000d83565b505050509050018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183810383528a818151815260200191508051906020019080838360005b8381101562000e7757808201518184015260208101905062000e5a565b50505050905090810190601f16801562000ea55780820380516001836020036101000a031916815260200191505b50838103825289818151815260200191508051906020019080838360005b8381101562000ee057808201518184015260208101905062000ec3565b50505050905090810190601f16801562000f0e5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051809103906000f08015801562000f37573d6000803e3d6000fd5b509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636daa98508286886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156200103457600080fd5b505af115801562001049573d6000803e3d6000fd5b505050508092508273ffffffffffffffffffffffffffffffffffffffff167fa3813ec7fba2e70e20df54e4f52ec626b028802742c8757d5be33c4a3742fb458b8b876040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360005b8381101562001103578082015181840152602081019050620010e6565b50505050905090810190601f168015620011315780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156200116c5780820151818401526020810190506200114f565b50505050905090810190601f1680156200119a5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a25050979650505050505050565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620011f557600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200125157600080fd5b7f1cb14cd4a6dec17ad26ab45fcd696a36140945e541fa2078d0a928cbc67c71a6600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a181600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060008160ff16118015620013b5575060648160ff16105b1515620013c157600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200141d57600080fd5b7f23067f1ae49cabd5aa4517f377e6217fd86926daafac88c78e2d8e1d5daf4d93600060149054906101000a900460ff1683604051808360ff1660ff1681526020018260ff1660ff1681526020019250505060405180910390a181600060146101000a81548160ff021916908360ff1602179055505050565b600060208201519050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200152657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200156357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060606040516024016040516020818303038152906040527f893d20e8000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608473ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083101515620016fd5780518252602082019150602081019050602083039250620016d6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146200175f576040519150601f19603f3d011682016040523d82523d6000602084013e62001764565b606091505b509150915081151562001805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f696e70757420616464726573732068617320746f20626520612076616c69642081526020017f6f776e61626c6520636f6e74726163740000000000000000000000000000000081525060400191505060405180910390fd5b620018108162001496565b9350505050919050565b62001824620019e4565b81606481600060149054906101000a900460ff160160ff161015156200184957600080fd5b620018766064620018678560ff16876200197490919063ffffffff16565b620019b390919063ffffffff16565b8260006003811015156200188657fe5b602002018181525050620018cb6064620018bc600060149054906101000a900460ff1660ff16876200197490919063ffffffff16565b620019b390919063ffffffff16565b826001600381101515620018db57fe5b60200201818152505062001935826001600381101515620018f857fe5b6020020151620019268460006003811015156200191157fe5b602002015187620019ca90919063ffffffff16565b620019ca90919063ffffffff16565b8260026003811015156200194557fe5b6020020181815250505092915050565b60008082840190508381101515156200196a57fe5b8091505092915050565b600080831415620019895760009050620019ad565b600082840290508284828115156200199d57fe5b04141515620019a857fe5b809150505b92915050565b60008183811515620019c157fe5b04905092915050565b6000828211151515620019d957fe5b818303905092915050565b606060405190810160405280600390602082028038833980820191505090505090565b604051611c368062001a198339019056fe60806040523480156200001157600080fd5b5060405162001c3638038062001c3683398101806040526101208110156200003857600080fd5b8101908080516401000000008111156200005157600080fd5b828101905060208101848111156200006857600080fd5b81518560018202830111640100000000821117156200008657600080fd5b50509291906020018051640100000000811115620000a357600080fd5b82810190506020810184811115620000ba57600080fd5b8151856001820283011164010000000082111715620000d857600080fd5b50509291906020018051906020019092919091908260600180519060200190929190805190602001909291908051906020019092919050505086600390805190602001906200012992919062000440565b5085600490805190602001906200014292919062000440565b5084600560006101000a81548160ff021916908360ff1602179055506000620001e18560026003811015156200017457fe5b6020020151620001c48760016003811015156200018d57fe5b6020020151886000600381101515620001a257fe5b6020020151620002a264010000000002620013a4179091906401000000009004565b620002a264010000000002620013a4179091906401000000009004565b90506200021284866000600381101515620001f857fe5b6020020151620002c1640100000000026401000000009004565b62000241838660016003811015156200022757fe5b6020020151620002c1640100000000026401000000009004565b62000270828660026003811015156200025657fe5b6020020151620002c1640100000000026401000000009004565b6200028962000436640100000000026401000000009004565b811415156200029457fe5b5050505050505050620004ef565b6000808284019050838110151515620002b757fe5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620002fe57600080fd5b6200032381600254620002a264010000000002620013a4179091906401000000009004565b6002819055506200038a816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620002a264010000000002620013a4179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000600254905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200048357805160ff1916838001178555620004b4565b82800160010185558215620004b4579182015b82811115620004b357825182559160200191906001019062000496565b5b509050620004c39190620004c7565b5090565b620004ec91905b80821115620004e8576000816000905550600101620004ce565b5090565b90565b61173780620004ff6000396000f3fe6080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014f57806318160ddd146101c257806323b872dd146101ed578063313ce5671461028057806339509351146102b157806370a082311461032457806379cc67901461038957806395d89b41146103e4578063a457c2d714610474578063a9059cbb146104e7578063dd62ed3e1461055a575b600080fd5b3480156100cb57600080fd5b506100d46105df565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101145780820151818401526020810190506100f9565b50505050905090810190601f1680156101415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015b57600080fd5b506101a86004803603604081101561017257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061067d565b604051808215151515815260200191505060405180910390f35b3480156101ce57600080fd5b506101d76107aa565b6040518082815260200191505060405180910390f35b3480156101f957600080fd5b506102666004803603606081101561021057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107b4565b604051808215151515815260200191505060405180910390f35b34801561028c57600080fd5b50610295610b6f565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102bd57600080fd5b5061030a600480360360408110156102d457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b82565b604051808215151515815260200191505060405180910390f35b34801561033057600080fd5b506103736004803603602081101561034757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610db9565b6040518082815260200191505060405180910390f35b34801561039557600080fd5b506103e2600480360360408110156103ac57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e01565b005b3480156103f057600080fd5b506103f9610e0f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561043957808201518184015260208101905061041e565b50505050905090810190601f1680156104665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561048057600080fd5b506104cd6004803603604081101561049757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ead565b604051808215151515815260200191505060405180910390f35b3480156104f357600080fd5b506105406004803603604081101561050a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110e4565b604051808215151515815260200191505060405180910390f35b34801561056657600080fd5b506105c96004803603604081101561057d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611304565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106755780601f1061064a57610100808354040283529160200191610675565b820191906000526020600020905b81548152906001019060200180831161065857829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106ba57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561080357600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561088e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156108ca57600080fd5b61091b826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461138b90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109ae826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113a490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a7f82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461138b90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600560009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610bbf57600080fd5b610c4e82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113a490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e0b82826113c2565b5050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ea55780601f10610e7a57610100808354040283529160200191610ea5565b820191906000526020600020905b815481529060010190602001808311610e8857829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610eea57600080fd5b610f7982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461138b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561113357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561116f57600080fd5b6111c0826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461138b90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611253826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113a490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115151561139957fe5b818303905092915050565b60008082840190508381101515156113b857fe5b8091505092915050565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561144d57600080fd5b6114dc81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461138b90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611566828261156a565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156115a657600080fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156115f357600080fd5b6116088160025461138b90919063ffffffff16565b60028190555061165f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461138b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505056fea165627a7a723058202d77cdf1d44ddbfccb85ccc9d69c93557663613aeeddabae1513ae55c52f160d0029a165627a7a72305820250eff06027bdd614347f7ff9bb7d9cf779f6c9df9f6753e4128ee86cc4a4e9e00296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506111b8806100536000396000f3fe6080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806319165587146100b45780632fa1b76b146100dd578063384711cc1461010857806342e16161146101455780636daa985014610182578063893d20e8146101ab5780638da5cb5b146101d6578063b718f83a14610201578063f2fde38b1461023e578063f78e633d14610267578063fb897ce4146102a7575b600080fd5b3480156100c057600080fd5b506100db60048036036100d69190810190610df8565b6102e4565b005b3480156100e957600080fd5b506100f26105a3565b6040516100ff9190611097565b60405180910390f35b34801561011457600080fd5b5061012f600480360361012a9190810190610df8565b6105aa565b60405161013c9190611097565b60405180910390f35b34801561015157600080fd5b5061016c60048036036101679190810190610df8565b6107b1565b6040516101799190611097565b60405180910390f35b34801561018e57600080fd5b506101a960048036036101a49190810190610e21565b610817565b005b3480156101b757600080fd5b506101c06109bc565b6040516101cd9190610fd3565b60405180910390f35b3480156101e257600080fd5b506101eb6109e5565b6040516101f89190610fd3565b60405180910390f35b34801561020d57600080fd5b5061022860048036036102239190810190610e99565b610a0a565b6040516102359190610fd3565b60405180910390f35b34801561024a57600080fd5b5061026560048036036102609190810190610df8565b610a18565b005b34801561027357600080fd5b5061028e60048036036102899190810190610df8565b610b6d565b60405161029e9493929190611017565b60405180910390f35b3480156102b357600080fd5b506102ce60048036036102c99190810190610df8565b610bbd565b6040516102db919061107c565b60405180910390f35b60006102ef826107b1565b905060008111151561030057600080fd5b61035581600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610c8b90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060008273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610456929190610fee565b602060405180830381600087803b15801561047057600080fd5b505af1158015610484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104a89190810190610e70565b90508015156104ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e39061105c565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f2d87480f50083e2b2759522a8fdda59802650a8055e609a7772cf70c07748f52600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684604051610596929190610fee565b60405180910390a2505050565b62093a8081565b60006105b4610d13565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020608060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481525050905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106cc9190610fd3565b60206040518083038186803b1580156106e457600080fd5b505afa1580156106f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061071c9190810190610eda565b90506000610737836020015183610c8b90919063ffffffff16565b905061075483606001518460400151610c8b90919063ffffffff16565b42101515610767578093505050506107ac565b6107a68360600151610798610789866040015142610ca990919063ffffffff16565b84610cc290919063ffffffff16565b610cfd90919063ffffffff16565b93505050505b919050565b6000610810600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610802846105aa565b610ca990919063ffffffff16565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561087257600080fd5b6080604051908101604052808373ffffffffffffffffffffffffffffffffffffffff168152602001600081526020014281526020016108bd62093a8084610cc290919063ffffffff16565b815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301559050508273ffffffffffffffffffffffffffffffffffffffff167f83ded1c585a48e261782bbbc8a77aeb32caff94dc4803fc6c8094721165a549083836040516109af929190610fee565b60405180910390a2505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060208201519050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a7357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610aaf57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b610bc5610d13565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020608060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250509050919050565b6000808284019050838110151515610c9f57fe5b8091505092915050565b6000828211151515610cb757fe5b818303905092915050565b600080831415610cd55760009050610cf7565b60008284029050828482811515610ce857fe5b04141515610cf257fe5b809150505b92915050565b60008183811515610d0a57fe5b04905092915050565b608060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b6000610d5e8235611147565b905092915050565b6000610d728251611159565b905092915050565b600082601f8301121515610d8d57600080fd5b8135610da0610d9b826110df565b6110b2565b91508082526020830160208301858383011115610dbc57600080fd5b610dc783828461116f565b50505092915050565b6000610ddc8235611165565b905092915050565b6000610df08251611165565b905092915050565b600060208284031215610e0a57600080fd5b6000610e1884828501610d52565b91505092915050565b600080600060608486031215610e3657600080fd5b6000610e4486828701610d52565b9350506020610e5586828701610d52565b9250506040610e6686828701610dd0565b9150509250925092565b600060208284031215610e8257600080fd5b6000610e9084828501610d66565b91505092915050565b600060208284031215610eab57600080fd5b600082013567ffffffffffffffff811115610ec557600080fd5b610ed184828501610d7a565b91505092915050565b600060208284031215610eec57600080fd5b6000610efa84828501610de4565b91505092915050565b610f0c8161110b565b82525050565b6000603382527f7472616e736665722066726f6d2076657374696e6720746f2062656e6566696360208301527f696172792068617320746f2073756363656564000000000000000000000000006040830152606082019050919050565b608082016000820151610f856000850182610f03565b506020820151610f986020850182610fc4565b506040820151610fab6040850182610fc4565b506060820151610fbe6060850182610fc4565b50505050565b610fcd8161113d565b82525050565b6000602082019050610fe86000830184610f03565b92915050565b60006040820190506110036000830185610f03565b6110106020830184610fc4565b9392505050565b600060808201905061102c6000830187610f03565b6110396020830186610fc4565b6110466040830185610fc4565b6110536060830184610fc4565b95945050505050565b6000602082019050818103600083015261107581610f12565b9050919050565b60006080820190506110916000830184610f6f565b92915050565b60006020820190506110ac6000830184610fc4565b92915050565b6000604051905081810181811067ffffffffffffffff821117156110d557600080fd5b8060405250919050565b600067ffffffffffffffff8211156110f657600080fd5b601f19601f8301169050602081019050919050565b60006111168261111d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006111528261111d565b9050919050565b60008115159050919050565b6000819050919050565b8281833760008383015250505056fea265627a7a72305820acd58e419e4ecec10457adf6ec6b37e7605dcbc80767a0a950b3df34a3199ec56c6578706572696d656e74616cf50037`

// DeployTokenFactory deploys a new Ethereum contract, binding an instance of TokenFactory to it.
func DeployTokenFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenVesting common.Address, _turingWallet common.Address, _platformPercentage uint8) (common.Address, *types.Transaction, *TokenFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenFactoryBin), backend, _tokenVesting, _turingWallet, _platformPercentage)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenFactory{TokenFactoryCaller: TokenFactoryCaller{contract: contract}, TokenFactoryTransactor: TokenFactoryTransactor{contract: contract}, TokenFactoryFilterer: TokenFactoryFilterer{contract: contract}}, nil
}

// TokenFactory is an auto generated Go binding around an Ethereum contract.
type TokenFactory struct {
	TokenFactoryCaller     // Read-only binding to the contract
	TokenFactoryTransactor // Write-only binding to the contract
	TokenFactoryFilterer   // Log filterer for contract events
}

// TokenFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenFactorySession struct {
	Contract     *TokenFactory     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenFactoryCallerSession struct {
	Contract *TokenFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TokenFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenFactoryTransactorSession struct {
	Contract     *TokenFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TokenFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenFactoryRaw struct {
	Contract *TokenFactory // Generic contract binding to access the raw methods on
}

// TokenFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenFactoryCallerRaw struct {
	Contract *TokenFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// TokenFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenFactoryTransactorRaw struct {
	Contract *TokenFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenFactory creates a new instance of TokenFactory, bound to a specific deployed contract.
func NewTokenFactory(address common.Address, backend bind.ContractBackend) (*TokenFactory, error) {
	contract, err := bindTokenFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenFactory{TokenFactoryCaller: TokenFactoryCaller{contract: contract}, TokenFactoryTransactor: TokenFactoryTransactor{contract: contract}, TokenFactoryFilterer: TokenFactoryFilterer{contract: contract}}, nil
}

// NewTokenFactoryCaller creates a new read-only instance of TokenFactory, bound to a specific deployed contract.
func NewTokenFactoryCaller(address common.Address, caller bind.ContractCaller) (*TokenFactoryCaller, error) {
	contract, err := bindTokenFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenFactoryCaller{contract: contract}, nil
}

// NewTokenFactoryTransactor creates a new write-only instance of TokenFactory, bound to a specific deployed contract.
func NewTokenFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenFactoryTransactor, error) {
	contract, err := bindTokenFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenFactoryTransactor{contract: contract}, nil
}

// NewTokenFactoryFilterer creates a new log filterer instance of TokenFactory, bound to a specific deployed contract.
func NewTokenFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenFactoryFilterer, error) {
	contract, err := bindTokenFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenFactoryFilterer{contract: contract}, nil
}

// bindTokenFactory binds a generic wrapper to an already deployed contract.
func bindTokenFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenFactory *TokenFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenFactory.Contract.TokenFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenFactory *TokenFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenFactory.Contract.TokenFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenFactory *TokenFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenFactory.Contract.TokenFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenFactory *TokenFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenFactory *TokenFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenFactory *TokenFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenFactory.Contract.contract.Transact(opts, method, params...)
}

// PLATFORMPERCENTAGE is a free data retrieval call binding the contract method 0x09886c9c.
//
// Solidity: function PLATFORM_PERCENTAGE() constant returns(uint8)
func (_TokenFactory *TokenFactoryCaller) PLATFORMPERCENTAGE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _TokenFactory.contract.Call(opts, out, "PLATFORM_PERCENTAGE")
	return *ret0, err
}

// PLATFORMPERCENTAGE is a free data retrieval call binding the contract method 0x09886c9c.
//
// Solidity: function PLATFORM_PERCENTAGE() constant returns(uint8)
func (_TokenFactory *TokenFactorySession) PLATFORMPERCENTAGE() (uint8, error) {
	return _TokenFactory.Contract.PLATFORMPERCENTAGE(&_TokenFactory.CallOpts)
}

// PLATFORMPERCENTAGE is a free data retrieval call binding the contract method 0x09886c9c.
//
// Solidity: function PLATFORM_PERCENTAGE() constant returns(uint8)
func (_TokenFactory *TokenFactoryCallerSession) PLATFORMPERCENTAGE() (uint8, error) {
	return _TokenFactory.Contract.PLATFORMPERCENTAGE(&_TokenFactory.CallOpts)
}

// PLATFORMWALLET is a free data retrieval call binding the contract method 0xeb8b12d4.
//
// Solidity: function PLATFORM_WALLET() constant returns(address)
func (_TokenFactory *TokenFactoryCaller) PLATFORMWALLET(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenFactory.contract.Call(opts, out, "PLATFORM_WALLET")
	return *ret0, err
}

// PLATFORMWALLET is a free data retrieval call binding the contract method 0xeb8b12d4.
//
// Solidity: function PLATFORM_WALLET() constant returns(address)
func (_TokenFactory *TokenFactorySession) PLATFORMWALLET() (common.Address, error) {
	return _TokenFactory.Contract.PLATFORMWALLET(&_TokenFactory.CallOpts)
}

// PLATFORMWALLET is a free data retrieval call binding the contract method 0xeb8b12d4.
//
// Solidity: function PLATFORM_WALLET() constant returns(address)
func (_TokenFactory *TokenFactoryCallerSession) PLATFORMWALLET() (common.Address, error) {
	return _TokenFactory.Contract.PLATFORMWALLET(&_TokenFactory.CallOpts)
}

// TokenVestingInstance is a free data retrieval call binding the contract method 0x151ad610.
//
// Solidity: function TokenVestingInstance() constant returns(address)
func (_TokenFactory *TokenFactoryCaller) TokenVestingInstance(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenFactory.contract.Call(opts, out, "TokenVestingInstance")
	return *ret0, err
}

// TokenVestingInstance is a free data retrieval call binding the contract method 0x151ad610.
//
// Solidity: function TokenVestingInstance() constant returns(address)
func (_TokenFactory *TokenFactorySession) TokenVestingInstance() (common.Address, error) {
	return _TokenFactory.Contract.TokenVestingInstance(&_TokenFactory.CallOpts)
}

// TokenVestingInstance is a free data retrieval call binding the contract method 0x151ad610.
//
// Solidity: function TokenVestingInstance() constant returns(address)
func (_TokenFactory *TokenFactoryCallerSession) TokenVestingInstance() (common.Address, error) {
	return _TokenFactory.Contract.TokenVestingInstance(&_TokenFactory.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_TokenFactory *TokenFactoryCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenFactory.contract.Call(opts, out, "getOwner")
	return *ret0, err
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_TokenFactory *TokenFactorySession) GetOwner() (common.Address, error) {
	return _TokenFactory.Contract.GetOwner(&_TokenFactory.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_TokenFactory *TokenFactoryCallerSession) GetOwner() (common.Address, error) {
	return _TokenFactory.Contract.GetOwner(&_TokenFactory.CallOpts)
}

// GetTokenVesting is a free data retrieval call binding the contract method 0x72172364.
//
// Solidity: function getTokenVesting() constant returns(address)
func (_TokenFactory *TokenFactoryCaller) GetTokenVesting(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenFactory.contract.Call(opts, out, "getTokenVesting")
	return *ret0, err
}

// GetTokenVesting is a free data retrieval call binding the contract method 0x72172364.
//
// Solidity: function getTokenVesting() constant returns(address)
func (_TokenFactory *TokenFactorySession) GetTokenVesting() (common.Address, error) {
	return _TokenFactory.Contract.GetTokenVesting(&_TokenFactory.CallOpts)
}

// GetTokenVesting is a free data retrieval call binding the contract method 0x72172364.
//
// Solidity: function getTokenVesting() constant returns(address)
func (_TokenFactory *TokenFactoryCallerSession) GetTokenVesting() (common.Address, error) {
	return _TokenFactory.Contract.GetTokenVesting(&_TokenFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TokenFactory *TokenFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TokenFactory *TokenFactorySession) Owner() (common.Address, error) {
	return _TokenFactory.Contract.Owner(&_TokenFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TokenFactory *TokenFactoryCallerSession) Owner() (common.Address, error) {
	return _TokenFactory.Contract.Owner(&_TokenFactory.CallOpts)
}

// ParseAddr is a free data retrieval call binding the contract method 0xb718f83a.
//
// Solidity: function parseAddr(data bytes) constant returns(parsed address)
func (_TokenFactory *TokenFactoryCaller) ParseAddr(opts *bind.CallOpts, data []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenFactory.contract.Call(opts, out, "parseAddr", data)
	return *ret0, err
}

// ParseAddr is a free data retrieval call binding the contract method 0xb718f83a.
//
// Solidity: function parseAddr(data bytes) constant returns(parsed address)
func (_TokenFactory *TokenFactorySession) ParseAddr(data []byte) (common.Address, error) {
	return _TokenFactory.Contract.ParseAddr(&_TokenFactory.CallOpts, data)
}

// ParseAddr is a free data retrieval call binding the contract method 0xb718f83a.
//
// Solidity: function parseAddr(data bytes) constant returns(parsed address)
func (_TokenFactory *TokenFactoryCallerSession) ParseAddr(data []byte) (common.Address, error) {
	return _TokenFactory.Contract.ParseAddr(&_TokenFactory.CallOpts, data)
}

// CreateToken is a paid mutator transaction binding the contract method 0x747ef425.
//
// Solidity: function createToken(_name string, _symbol string, _decimals uint8, _totalSupply uint256, _initialPercentage uint8, _vestingPeriodInWeeks uint256, _vestingBeneficiary address) returns(token address)
func (_TokenFactory *TokenFactoryTransactor) CreateToken(opts *bind.TransactOpts, _name string, _symbol string, _decimals uint8, _totalSupply *big.Int, _initialPercentage uint8, _vestingPeriodInWeeks *big.Int, _vestingBeneficiary common.Address) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "createToken", _name, _symbol, _decimals, _totalSupply, _initialPercentage, _vestingPeriodInWeeks, _vestingBeneficiary)
}

// CreateToken is a paid mutator transaction binding the contract method 0x747ef425.
//
// Solidity: function createToken(_name string, _symbol string, _decimals uint8, _totalSupply uint256, _initialPercentage uint8, _vestingPeriodInWeeks uint256, _vestingBeneficiary address) returns(token address)
func (_TokenFactory *TokenFactorySession) CreateToken(_name string, _symbol string, _decimals uint8, _totalSupply *big.Int, _initialPercentage uint8, _vestingPeriodInWeeks *big.Int, _vestingBeneficiary common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.CreateToken(&_TokenFactory.TransactOpts, _name, _symbol, _decimals, _totalSupply, _initialPercentage, _vestingPeriodInWeeks, _vestingBeneficiary)
}

// CreateToken is a paid mutator transaction binding the contract method 0x747ef425.
//
// Solidity: function createToken(_name string, _symbol string, _decimals uint8, _totalSupply uint256, _initialPercentage uint8, _vestingPeriodInWeeks uint256, _vestingBeneficiary address) returns(token address)
func (_TokenFactory *TokenFactoryTransactorSession) CreateToken(_name string, _symbol string, _decimals uint8, _totalSupply *big.Int, _initialPercentage uint8, _vestingPeriodInWeeks *big.Int, _vestingBeneficiary common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.CreateToken(&_TokenFactory.TransactOpts, _name, _symbol, _decimals, _totalSupply, _initialPercentage, _vestingPeriodInWeeks, _vestingBeneficiary)
}

// MigrateTokenFactory is a paid mutator transaction binding the contract method 0x57796797.
//
// Solidity: function migrateTokenFactory(_newTokenFactory address) returns()
func (_TokenFactory *TokenFactoryTransactor) MigrateTokenFactory(opts *bind.TransactOpts, _newTokenFactory common.Address) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "migrateTokenFactory", _newTokenFactory)
}

// MigrateTokenFactory is a paid mutator transaction binding the contract method 0x57796797.
//
// Solidity: function migrateTokenFactory(_newTokenFactory address) returns()
func (_TokenFactory *TokenFactorySession) MigrateTokenFactory(_newTokenFactory common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.MigrateTokenFactory(&_TokenFactory.TransactOpts, _newTokenFactory)
}

// MigrateTokenFactory is a paid mutator transaction binding the contract method 0x57796797.
//
// Solidity: function migrateTokenFactory(_newTokenFactory address) returns()
func (_TokenFactory *TokenFactoryTransactorSession) MigrateTokenFactory(_newTokenFactory common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.MigrateTokenFactory(&_TokenFactory.TransactOpts, _newTokenFactory)
}

// SetPlatformPercentage is a paid mutator transaction binding the contract method 0x961f3c01.
//
// Solidity: function setPlatformPercentage(_newPercentage uint8) returns()
func (_TokenFactory *TokenFactoryTransactor) SetPlatformPercentage(opts *bind.TransactOpts, _newPercentage uint8) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "setPlatformPercentage", _newPercentage)
}

// SetPlatformPercentage is a paid mutator transaction binding the contract method 0x961f3c01.
//
// Solidity: function setPlatformPercentage(_newPercentage uint8) returns()
func (_TokenFactory *TokenFactorySession) SetPlatformPercentage(_newPercentage uint8) (*types.Transaction, error) {
	return _TokenFactory.Contract.SetPlatformPercentage(&_TokenFactory.TransactOpts, _newPercentage)
}

// SetPlatformPercentage is a paid mutator transaction binding the contract method 0x961f3c01.
//
// Solidity: function setPlatformPercentage(_newPercentage uint8) returns()
func (_TokenFactory *TokenFactoryTransactorSession) SetPlatformPercentage(_newPercentage uint8) (*types.Transaction, error) {
	return _TokenFactory.Contract.SetPlatformPercentage(&_TokenFactory.TransactOpts, _newPercentage)
}

// SetPlatformWallet is a paid mutator transaction binding the contract method 0x8831e9cf.
//
// Solidity: function setPlatformWallet(_newPlatformWallet address) returns()
func (_TokenFactory *TokenFactoryTransactor) SetPlatformWallet(opts *bind.TransactOpts, _newPlatformWallet common.Address) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "setPlatformWallet", _newPlatformWallet)
}

// SetPlatformWallet is a paid mutator transaction binding the contract method 0x8831e9cf.
//
// Solidity: function setPlatformWallet(_newPlatformWallet address) returns()
func (_TokenFactory *TokenFactorySession) SetPlatformWallet(_newPlatformWallet common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.SetPlatformWallet(&_TokenFactory.TransactOpts, _newPlatformWallet)
}

// SetPlatformWallet is a paid mutator transaction binding the contract method 0x8831e9cf.
//
// Solidity: function setPlatformWallet(_newPlatformWallet address) returns()
func (_TokenFactory *TokenFactoryTransactorSession) SetPlatformWallet(_newPlatformWallet common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.SetPlatformWallet(&_TokenFactory.TransactOpts, _newPlatformWallet)
}

// SetTokenVesting is a paid mutator transaction binding the contract method 0x43e34696.
//
// Solidity: function setTokenVesting(_newTokenVesting address) returns()
func (_TokenFactory *TokenFactoryTransactor) SetTokenVesting(opts *bind.TransactOpts, _newTokenVesting common.Address) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "setTokenVesting", _newTokenVesting)
}

// SetTokenVesting is a paid mutator transaction binding the contract method 0x43e34696.
//
// Solidity: function setTokenVesting(_newTokenVesting address) returns()
func (_TokenFactory *TokenFactorySession) SetTokenVesting(_newTokenVesting common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.SetTokenVesting(&_TokenFactory.TransactOpts, _newTokenVesting)
}

// SetTokenVesting is a paid mutator transaction binding the contract method 0x43e34696.
//
// Solidity: function setTokenVesting(_newTokenVesting address) returns()
func (_TokenFactory *TokenFactoryTransactorSession) SetTokenVesting(_newTokenVesting common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.SetTokenVesting(&_TokenFactory.TransactOpts, _newTokenVesting)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_TokenFactory *TokenFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_TokenFactory *TokenFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.TransferOwnership(&_TokenFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_TokenFactory *TokenFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.TransferOwnership(&_TokenFactory.TransactOpts, newOwner)
}

// TokenFactoryLogPlatformPercentageChangedIterator is returned from FilterLogPlatformPercentageChanged and is used to iterate over the raw logs and unpacked data for LogPlatformPercentageChanged events raised by the TokenFactory contract.
type TokenFactoryLogPlatformPercentageChangedIterator struct {
	Event *TokenFactoryLogPlatformPercentageChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenFactoryLogPlatformPercentageChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenFactoryLogPlatformPercentageChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenFactoryLogPlatformPercentageChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenFactoryLogPlatformPercentageChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenFactoryLogPlatformPercentageChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenFactoryLogPlatformPercentageChanged represents a LogPlatformPercentageChanged event raised by the TokenFactory contract.
type TokenFactoryLogPlatformPercentageChanged struct {
	OldP uint8
	NewP uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogPlatformPercentageChanged is a free log retrieval operation binding the contract event 0x23067f1ae49cabd5aa4517f377e6217fd86926daafac88c78e2d8e1d5daf4d93.
//
// Solidity: e LogPlatformPercentageChanged(oldP uint8, newP uint8)
func (_TokenFactory *TokenFactoryFilterer) FilterLogPlatformPercentageChanged(opts *bind.FilterOpts) (*TokenFactoryLogPlatformPercentageChangedIterator, error) {

	logs, sub, err := _TokenFactory.contract.FilterLogs(opts, "LogPlatformPercentageChanged")
	if err != nil {
		return nil, err
	}
	return &TokenFactoryLogPlatformPercentageChangedIterator{contract: _TokenFactory.contract, event: "LogPlatformPercentageChanged", logs: logs, sub: sub}, nil
}

// WatchLogPlatformPercentageChanged is a free log subscription operation binding the contract event 0x23067f1ae49cabd5aa4517f377e6217fd86926daafac88c78e2d8e1d5daf4d93.
//
// Solidity: e LogPlatformPercentageChanged(oldP uint8, newP uint8)
func (_TokenFactory *TokenFactoryFilterer) WatchLogPlatformPercentageChanged(opts *bind.WatchOpts, sink chan<- *TokenFactoryLogPlatformPercentageChanged) (event.Subscription, error) {

	logs, sub, err := _TokenFactory.contract.WatchLogs(opts, "LogPlatformPercentageChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenFactoryLogPlatformPercentageChanged)
				if err := _TokenFactory.contract.UnpackLog(event, "LogPlatformPercentageChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenFactoryLogPlatformWalletChangedIterator is returned from FilterLogPlatformWalletChanged and is used to iterate over the raw logs and unpacked data for LogPlatformWalletChanged events raised by the TokenFactory contract.
type TokenFactoryLogPlatformWalletChangedIterator struct {
	Event *TokenFactoryLogPlatformWalletChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenFactoryLogPlatformWalletChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenFactoryLogPlatformWalletChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenFactoryLogPlatformWalletChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenFactoryLogPlatformWalletChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenFactoryLogPlatformWalletChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenFactoryLogPlatformWalletChanged represents a LogPlatformWalletChanged event raised by the TokenFactory contract.
type TokenFactoryLogPlatformWalletChanged struct {
	OldPW common.Address
	NewPW common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogPlatformWalletChanged is a free log retrieval operation binding the contract event 0x1cb14cd4a6dec17ad26ab45fcd696a36140945e541fa2078d0a928cbc67c71a6.
//
// Solidity: e LogPlatformWalletChanged(oldPW address, newPW address)
func (_TokenFactory *TokenFactoryFilterer) FilterLogPlatformWalletChanged(opts *bind.FilterOpts) (*TokenFactoryLogPlatformWalletChangedIterator, error) {

	logs, sub, err := _TokenFactory.contract.FilterLogs(opts, "LogPlatformWalletChanged")
	if err != nil {
		return nil, err
	}
	return &TokenFactoryLogPlatformWalletChangedIterator{contract: _TokenFactory.contract, event: "LogPlatformWalletChanged", logs: logs, sub: sub}, nil
}

// WatchLogPlatformWalletChanged is a free log subscription operation binding the contract event 0x1cb14cd4a6dec17ad26ab45fcd696a36140945e541fa2078d0a928cbc67c71a6.
//
// Solidity: e LogPlatformWalletChanged(oldPW address, newPW address)
func (_TokenFactory *TokenFactoryFilterer) WatchLogPlatformWalletChanged(opts *bind.WatchOpts, sink chan<- *TokenFactoryLogPlatformWalletChanged) (event.Subscription, error) {

	logs, sub, err := _TokenFactory.contract.WatchLogs(opts, "LogPlatformWalletChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenFactoryLogPlatformWalletChanged)
				if err := _TokenFactory.contract.UnpackLog(event, "LogPlatformWalletChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenFactoryLogTokenCreatedIterator is returned from FilterLogTokenCreated and is used to iterate over the raw logs and unpacked data for LogTokenCreated events raised by the TokenFactory contract.
type TokenFactoryLogTokenCreatedIterator struct {
	Event *TokenFactoryLogTokenCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenFactoryLogTokenCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenFactoryLogTokenCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenFactoryLogTokenCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenFactoryLogTokenCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenFactoryLogTokenCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenFactoryLogTokenCreated represents a LogTokenCreated event raised by the TokenFactory contract.
type TokenFactoryLogTokenCreated struct {
	Name               string
	Symbol             string
	Token              common.Address
	VestingBeneficiary common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterLogTokenCreated is a free log retrieval operation binding the contract event 0xa3813ec7fba2e70e20df54e4f52ec626b028802742c8757d5be33c4a3742fb45.
//
// Solidity: e LogTokenCreated(name string, symbol string, token indexed address, vestingBeneficiary address)
func (_TokenFactory *TokenFactoryFilterer) FilterLogTokenCreated(opts *bind.FilterOpts, token []common.Address) (*TokenFactoryLogTokenCreatedIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _TokenFactory.contract.FilterLogs(opts, "LogTokenCreated", tokenRule)
	if err != nil {
		return nil, err
	}
	return &TokenFactoryLogTokenCreatedIterator{contract: _TokenFactory.contract, event: "LogTokenCreated", logs: logs, sub: sub}, nil
}

// WatchLogTokenCreated is a free log subscription operation binding the contract event 0xa3813ec7fba2e70e20df54e4f52ec626b028802742c8757d5be33c4a3742fb45.
//
// Solidity: e LogTokenCreated(name string, symbol string, token indexed address, vestingBeneficiary address)
func (_TokenFactory *TokenFactoryFilterer) WatchLogTokenCreated(opts *bind.WatchOpts, sink chan<- *TokenFactoryLogTokenCreated, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _TokenFactory.contract.WatchLogs(opts, "LogTokenCreated", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenFactoryLogTokenCreated)
				if err := _TokenFactory.contract.UnpackLog(event, "LogTokenCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenFactoryLogTokenFactoryMigratedIterator is returned from FilterLogTokenFactoryMigrated and is used to iterate over the raw logs and unpacked data for LogTokenFactoryMigrated events raised by the TokenFactory contract.
type TokenFactoryLogTokenFactoryMigratedIterator struct {
	Event *TokenFactoryLogTokenFactoryMigrated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenFactoryLogTokenFactoryMigratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenFactoryLogTokenFactoryMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenFactoryLogTokenFactoryMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenFactoryLogTokenFactoryMigratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenFactoryLogTokenFactoryMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenFactoryLogTokenFactoryMigrated represents a LogTokenFactoryMigrated event raised by the TokenFactory contract.
type TokenFactoryLogTokenFactoryMigrated struct {
	NewTokenFactory common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterLogTokenFactoryMigrated is a free log retrieval operation binding the contract event 0x43f3ecc0ae19ce2fa7256a950513c1bee76722d5f51f34db0c862105411c6ba6.
//
// Solidity: e LogTokenFactoryMigrated(newTokenFactory address)
func (_TokenFactory *TokenFactoryFilterer) FilterLogTokenFactoryMigrated(opts *bind.FilterOpts) (*TokenFactoryLogTokenFactoryMigratedIterator, error) {

	logs, sub, err := _TokenFactory.contract.FilterLogs(opts, "LogTokenFactoryMigrated")
	if err != nil {
		return nil, err
	}
	return &TokenFactoryLogTokenFactoryMigratedIterator{contract: _TokenFactory.contract, event: "LogTokenFactoryMigrated", logs: logs, sub: sub}, nil
}

// WatchLogTokenFactoryMigrated is a free log subscription operation binding the contract event 0x43f3ecc0ae19ce2fa7256a950513c1bee76722d5f51f34db0c862105411c6ba6.
//
// Solidity: e LogTokenFactoryMigrated(newTokenFactory address)
func (_TokenFactory *TokenFactoryFilterer) WatchLogTokenFactoryMigrated(opts *bind.WatchOpts, sink chan<- *TokenFactoryLogTokenFactoryMigrated) (event.Subscription, error) {

	logs, sub, err := _TokenFactory.contract.WatchLogs(opts, "LogTokenFactoryMigrated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenFactoryLogTokenFactoryMigrated)
				if err := _TokenFactory.contract.UnpackLog(event, "LogTokenFactoryMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenFactoryLogTokenVestingChangedIterator is returned from FilterLogTokenVestingChanged and is used to iterate over the raw logs and unpacked data for LogTokenVestingChanged events raised by the TokenFactory contract.
type TokenFactoryLogTokenVestingChangedIterator struct {
	Event *TokenFactoryLogTokenVestingChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenFactoryLogTokenVestingChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenFactoryLogTokenVestingChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenFactoryLogTokenVestingChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenFactoryLogTokenVestingChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenFactoryLogTokenVestingChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenFactoryLogTokenVestingChanged represents a LogTokenVestingChanged event raised by the TokenFactory contract.
type TokenFactoryLogTokenVestingChanged struct {
	OldTV common.Address
	NewTV common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogTokenVestingChanged is a free log retrieval operation binding the contract event 0x35b0178b0584d12972881578e88c921bc0e92c26c168d8637f9c5f48fb99fd64.
//
// Solidity: e LogTokenVestingChanged(oldTV address, newTV address)
func (_TokenFactory *TokenFactoryFilterer) FilterLogTokenVestingChanged(opts *bind.FilterOpts) (*TokenFactoryLogTokenVestingChangedIterator, error) {

	logs, sub, err := _TokenFactory.contract.FilterLogs(opts, "LogTokenVestingChanged")
	if err != nil {
		return nil, err
	}
	return &TokenFactoryLogTokenVestingChangedIterator{contract: _TokenFactory.contract, event: "LogTokenVestingChanged", logs: logs, sub: sub}, nil
}

// WatchLogTokenVestingChanged is a free log subscription operation binding the contract event 0x35b0178b0584d12972881578e88c921bc0e92c26c168d8637f9c5f48fb99fd64.
//
// Solidity: e LogTokenVestingChanged(oldTV address, newTV address)
func (_TokenFactory *TokenFactoryFilterer) WatchLogTokenVestingChanged(opts *bind.WatchOpts, sink chan<- *TokenFactoryLogTokenVestingChanged) (event.Subscription, error) {

	logs, sub, err := _TokenFactory.contract.WatchLogs(opts, "LogTokenVestingChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenFactoryLogTokenVestingChanged)
				if err := _TokenFactory.contract.UnpackLog(event, "LogTokenVestingChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenFactoryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TokenFactory contract.
type TokenFactoryOwnershipTransferredIterator struct {
	Event *TokenFactoryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenFactoryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenFactoryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenFactoryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenFactoryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenFactoryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenFactoryOwnershipTransferred represents a OwnershipTransferred event raised by the TokenFactory contract.
type TokenFactoryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_TokenFactory *TokenFactoryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TokenFactoryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenFactory.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TokenFactoryOwnershipTransferredIterator{contract: _TokenFactory.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_TokenFactory *TokenFactoryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TokenFactoryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenFactory.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenFactoryOwnershipTransferred)
				if err := _TokenFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
